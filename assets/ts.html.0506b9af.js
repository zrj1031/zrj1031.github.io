import{r as o,o as e,c,a as n,b as p,F as l,e as t,d as s}from"./app.25546b90.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const k={},u=t(`<h1 id="ts\u7C7B\u578B\u4F53\u64CD" tabindex="-1"><a class="header-anchor" href="#ts\u7C7B\u578B\u4F53\u64CD" aria-hidden="true">#</a> ts\u7C7B\u578B\u4F53\u64CD</h1><blockquote><p>\u8BB0\u5F55\u4E00\u4E9B\u9AD8\u7EA7ts\u63A8\u5BFC</p></blockquote><h2 id="tomap" tabindex="-1"><a class="header-anchor" href="#tomap" aria-hidden="true">#</a> toMap</h2><blockquote><p>\u80CC\u666F: \u67D0\u65E5\u5728\u516C\u53F8ts\u4F53\u64CD\u7FA4\uFF0C\u770B\u5230\u6709\u540C\u5B66\u5728\u95EE\uFF0C\u9898\u76EE\u770B\u7740\u4E5F\u4E0D\u662F\u5F88\u590D\u6742\uFF0C\u4E5F\u6709\u540C\u5B66\u8FC5\u901F\u7ED9\u51FA\u4E86\u7B54\u6848\uFF0C\u7136\u540E\u6211\u5C31\u778E\u4E86, \u660E\u660E\u90FD\u770B\u7684\u61C2\uFF0C\u548B\u7EC4\u5408\u5728\u4E00\u8D77\u5C31\u770B\u4E0D\u660E\u767D\u4E86</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
declare <span class="token keyword">function</span> <span class="token function">toMap</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">toMap</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;zhao\u5927\u5EFA&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// \u5E0C\u671B\u5B9E\u73B0toMap\u7684\u51FD\u6570\u58F0\u660E\u4F7F\u5F97data\u5177\u6709{name: &#39;zhao\u5927\u5EFA&#39;, age: 18}\u7684\u7C7B\u578B\u63A8\u5BFC</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,5),i=s("\u5148\u9644\u4E0A\u7B54\u6848, "),d={href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAqgdgSwPZwCpIJJ2BATgZwgGNhk4AeGAPigF4oAKAKCliggA8c4ATfKAIZwQUAPyMA1gC5YASjo0AbkgQ8ZcCIrxN5nbn0YNpUBHABmeKBnm0lKnvJZirT9ZrwBuJkx7EANgK40GYArnAkZFDASACyAmDkTgDS7FwQvPz4wLimAOYANE4Aaqn6mdl5UAA+UHAhALYARniFrKil6QYA3lASECAySflQigJ+IRAyRQC+ANoAuq1QAEp0UKizdU1480xUDGCBAvX4MqiyMvBk6Fg4BMSkKOSrep38G1vNuPPOXbMACiY4CtZgByPogUHzeYyZZg0bjCBQ6ZQNxaXBULxMIgoLJQHgCYACNbROJgBizJw9CEyUFwY5I4YIia0gBeAAsBEhAOSagC+9UHTYZU3r9WkCXKMkZjFlQACMAA5pkx5rInEA",target:"_blank",rel:"noopener noreferrer"},b=s("typescript playGround"),m=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token operator">?</span> <span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">I</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> 
  <span class="token operator">?</span> <span class="token constant">I</span>
  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">toMap</span><span class="token generic class-name"><span class="token operator">&lt;</span>
  <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token constant">V</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">R</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span>
<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">toMap</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&#39;zhao\u5927\u5EFA&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>\u6CDB\u578B\u8FD0\u7528\u8F83\u591A\uFF0C\u4E00\u6B65\u6B65\u62C6\u5206\u7EC6\u770B</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">toMap</span><span class="token generic class-name"><span class="token operator">&lt;</span>
  <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token constant">V</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">R</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span>
<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>K V T\u6CDB\u578B\u90FD\u662F\u7EA6\u675F\u4F20\u5165\u7684\u683C\u5F0F\uFF0C\u6CA1\u5565\u597D\u591A\u8BF4\u7684\uFF0C\u90FD\u80FD\u901A\u8FC7\u4F20\u5165\u7684params\u6765\u53CD\u63A8\u51FA\u5177\u4F53\u7684\u7C7B\u578B\uFF0C\u90A3\u8FD9\u4E2AR = T[number]\u662F\u4E2A\u4EC0\u4E48\u4E1C\u897F\uFF0C\u4E07\u80FDgoogle\u540E\u53EF\u77E5T[number]\u53EF\u83B7\u53D6T\u6570\u7EC4\u7684\u5143\u7D20\u8054\u5408\u7C7B\u578B\uFF0C\u8FD9\u6837\u6211\u4EEC\u5C31\u5F97\u5230\u4E86\u5982\u4E0B\u7684\u4E00\u4E2A\u8054\u5408\u7C7B\u578B</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;zhao\u5927\u5EFA&#39;</span><span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token punctuation">{</span>age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>`,5),g=n("em",null,[n("strong",null,"\u91CD\u5934\u620F")],-1),y=s("\uFF0C\u518D\u6765\u770B"),v=n("code",null,"UnionToIntersection",-1),_=s("\u8FD9\u4E2A\u7C7B\u578B\uFF0C\u542C\u540D\u5B57\u5C31\u662F\u628A\u8054\u5408\u7C7B\u578B\u8F6C\u5316\u6210\u4EA4\u53C9\u7C7B\u578B\uFF0C\uFF08A | B => A & B\uFF09, \u5177\u4F53\u6765\u770B "),w=n("code",null,"U extends any",-1),h=s("\u6052\u6210\u7ACB\uFF0C\u90A3\u5C31\u662F "),A=n("code",null,"(k: U) => void extends ((k: infer I) => void) ? I : never",-1),x=s(", \u8FD9\u91CC\u6D89\u53CA\u5230\u4E00\u4E9B\u9006\u53D8\u548C\u534F\u53D8\u7684\u77E5\u8BC6, \u53EF\u4EE5\u53C2\u7167\u4E0B"),f={href:"https://mpxjs.cn/articles/ts-derivation.html#type-inference-in-conditional-types",target:"_blank",rel:"noopener noreferrer"},T=s("mpx\u7684\u4E00\u7BC7\u6587\u7AE0"),I=s("\u548C"),U={href:"https://juejin.cn/post/6926812947050135565",target:"_blank",rel:"noopener noreferrer"},B=s("\u6398\u91D1\u4E0A\u7684\u4E00\u7BC7\u6587\u7AE0"),C=s(", \u6700\u5F00\u59CB\u6211\u767E\u601D\u4E0D\u5F97\u5176\u89E3\uFF0C\u8FD9\u4E2A"),R=n("code",null,"infer",-1),Z=s("\u6211\u77E5\u9053\u554A\uFF0C\u5728ReturnType\u4E0A\u89C1\u8FC7"),M=t(`<p>\u9644\u4E0A\u4EE3\u7801</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type MyReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> infer <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> any
type fnType <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u90A3\u63A8\u5BFC\u51FA\u6765\u7684I\u4E0D\u5C31\u662FU\u4E48\uFF0C\u8FD9\u611F\u89C9\u90FD\u6CA1\u5565\u610F\u4E49, <em><strong>\u6CE8\u610F\uFF0C\u6211\u4EEC\u8FD9\u91CC\u4F20\u5165\u7684U\u662F\u8054\u5408\u7C7B\u578B</strong></em>\uFF0C\u5982\u679C\u4F20\u5165\u7684\u662F\u5176\u4ED6\u7C7B\u578B\u8FD8\u771F\u6CA1\u5565\u610F\u4E49</p><p>\u5982\u679C\u8FD9\u4E2AU\u662F<code>X|Y|Z</code>\u7684\u8054\u5408\u7C7B\u578B\uFF0C</p><p>\u5176\u5B9E\u4E0D\u662F\u8FD9\u4E48\u63A8\u5BFC</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token constant">X</span><span class="token operator">|</span><span class="token constant">Y</span><span class="token operator">|</span><span class="token constant">Z</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">I</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">I</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>\u5176\u5B9E\u4ED6\u662F\u8FD9\u4E48\u63A8\u5BFC\u7684</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token constant">X</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">I</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">I</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span>
<span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token constant">Y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">I</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">I</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span>
<span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token constant">Z</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">I</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">I</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u90A3\u8FD9\u4E2AI\u65E2\u662FX\u53C8\u662FY\u53C8\u662FZ, \u90A3\u5C31\u662F<code>X&amp;Y&amp;Z</code>\u7684\u7C7B\u578B\uFF0C\u540C\u7406<code>UnionToIntersection&lt;string | number&gt;</code>\u6211\u4EEC\u4F1A\u76F4\u63A5\u5F97\u5230\u4E00\u4E2Anever\u7C7B\u578B\uFF0C\u56E0\u4E3Astring &amp; number\u4E0D\u5B58\u5728\uFF0C\u4F46<code>{name: &#39;zhao\u5927\u5EFA&#39;} &amp; {age: 18}</code>\u662F\u5B58\u5728\u7684\uFF0C\u5373<code>{name: &#39;zhao\u5927\u5EFA&#39;, age: 18}</code></p>`,9);function Y(K,N){const a=o("ExternalLinkIcon");return e(),c(l,null,[u,n("p",null,[i,n("a",d,[b,p(a)])]),m,n("p",null,[g,y,v,_,w,h,A,x,n("a",f,[T,p(a)]),I,n("a",U,[B,p(a)]),C,R,Z]),M],64)}var z=r(k,[["render",Y]]);export{z as default};
